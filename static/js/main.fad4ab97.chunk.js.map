{"version":3,"sources":["Components/Header.js","Components/mousetrap-bind-dictionary.js","Components/Body.js","App.js","index.js"],"names":["StyledDiv","styled","div","Header","answer","this","props","id","React","Component","b","a","c","prototype","bind","arguments","Array","call","hasOwnProperty","init","Mousetrap","Title","h2","Calculator","App","Fragment","ReactDOM","render","document","getElementById"],"mappings":"wvBAGA,IAAMA,EAAYC,IAAOC,IAAV,KA2BAC,E,iLARH,IACAC,EAAWC,KAAKC,MAAhBF,OACR,OACC,kBAACJ,EAAD,CAAWO,GAAG,eAAeH,O,GAJbI,IAAMC,W,iBCpB3B,SAAUC,GAAG,IAAuBC,EAAnBC,EAAEF,EAAEG,UAAUC,KAAOJ,EAAEG,UAAUC,KAAK,WAAuB,GAAG,iBAAfH,EAAEI,WAAgC,IAAIJ,EAAE,aAAaK,MAAM,OAAOJ,EAAEK,KAAKZ,KAAKM,EAAE,GAAGA,EAAE,GAAGA,EAAE,IAAI,IAAI,IAAID,KAAKC,EAAE,GAAGA,EAAE,GAAGO,eAAeR,IAAIE,EAAEK,KAAKZ,KAAKK,EAAEC,EAAE,GAAGD,GAAGC,EAAE,KAAKD,EAAES,OAAzO,CAAkPC,K,MCM/NZ,IAAMC,U,wZCFzB,IAAMY,EAAQpB,IAAOqB,GAAV,KAOLC,EAAatB,IAAOC,IAAV,KAmBDsB,MAVf,WACE,OACE,kBAAC,IAAMC,SAAP,KACE,kBAACJ,EAAD,CAAOd,GAAG,SAAV,cACA,kBAACgB,EAAD,CAAYhB,GAAG,iBCpBrBmB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.fad4ab97.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nconst StyledDiv = styled.div`\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  -webkit-box-pack: end;\n      -ms-flex-pack: end;\n          justify-content: flex-end;\n  font-size: 2em;\n  padding: 5px 10px;\n  border: 1px solid #000;\n  border-radius: 4px 4px 0 0;\n  background-color: #444;\n  cursor: default;\n`\n\nclass Header extends React.Component {\n  render() {\n    const { answer } = this.props\n    return (\n    \t<StyledDiv id=\"calc-header\">{answer}</StyledDiv>\n    )\n  }\n}\n\nexport default Header","import Mousetrap from 'mousetrap'\n(function(b){var c=b.prototype.bind,a;b.prototype.bind=function(){a=arguments;if(\"string\"==typeof a[0]||a[0]instanceof Array)return c.call(this,a[0],a[1],a[2]);for(var b in a[0])a[0].hasOwnProperty(b)&&c.call(this,b,a[0][b],a[1])};b.init()})(Mousetrap);","import React from 'react'\nimport Header from './Header.js'\nimport Mousetrap from 'mousetrap'\nimport './mousetrap-bind-dictionary'\n\nimport './Body.css'\n\nclass Body extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      answer: '0',\n      storedValue: '0',\n      operation: '',\n      plusMinusPressed: false,\n      decPressed: false,\n      numPressed: false\n    }\n    this.handleClear = this.handleClear.bind(this)\n    this.handlePlusMinus = this.handlePlusMinus.bind(this)\n    this.handlePercent = this.handlePercent.bind(this)\n    this.handleOperation = this.handleOperation.bind(this)\n    this.handleEquals = this.handleEquals.bind(this)\n    this.handleDot = this.handleDot.bind(this)\n    this.handleNumber = this.handleNumber.bind(this)\n  }\n\n  handleClear() {\n    this.setState(() => ({\n      answer: '0',\n      storedValue: '0',\n      operation: '',\n      plusMinusPressed: false,\n      decPressed: false,\n      numPressed: false\n    }))\n  }\n  handlePlusMinus() {\n    this.setState((prevState) => ({\n      answer: (Number(prevState.answer) * -1).toString(),\n      plusMinusPressed: true\n    }))\n  }\n  handlePercent() {\n    this.setState((prevState) => ({\n      answer: (Number(prevState.answer) / 100).toString(),\n      decPressed: true\n    }))\n  }\n  handleOperation(operation) {\n    this.setState((prevState) => ({\n      storedValue: prevState.answer,\n      operation\n    }))\n  }\n  handleEquals() {\n    switch(this.state.operation) {\n      case '/':\n        this.setState((prevState) => ({\n          answer: (Number(prevState.storedValue) / Number(prevState.answer)).toString()\n        }));\n        break;\n      case 'x':\n        this.setState((prevState) => ({\n          answer: (Number(prevState.storedValue) * Number(prevState.answer)).toString()\n        }));\n        break;\n      case '-':\n        this.setState((prevState) => ({\n          answer: (Number(prevState.storedValue) - Number(prevState.answer)).toString()\n        }));\n        break;\n      case '+':\n        this.setState((prevState) => ({\n          answer: (Number(prevState.storedValue) + Number(prevState.answer)).toString()\n        }));\n        break;\n      default:\n        console.log(`The operation (${this.prevState.operation}) does not exist.`)\n    }\n  }\n  handleDot() {\n    /* . */\n    if (this.state.decPressed === false) {\n      this.setState(prevState => ({\n        answer: prevState.answer += \".\",\n        decPressed: true,\n        numPressed: true\n      }))\n    }\n  }\n  handleNumber(digit) {\n    /* 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 */\n\n    if (this.state.plusMinusPressed) { // Function for +/-, % or = new number should be zero.\n      this.handleClear()\n      this.setState((prevState) => ({ answer: '' }))     // Fix this func. once I have operations.\n    }\n\n\n\n    if (this.state.numPressed) {\n      this.setState(prevState => ({ answer: prevState.answer += digit }))\n    }\n    else {\n      if (digit === '0') {\n        //Do nothing\n      }\n      else {\n        this.setState(prevState => ({\n          answer: prevState.answer = digit,\n          numPressed: prevState.numPressed = true\n        }))\n      }\n    }\n  }\n\n\n  render() {\n    // Handle keystrokes\n    Mousetrap.bind(['c', 'C', 'esc'], () => { this.handleClear() })\n    Mousetrap.bind(['%'], () => { this.handlePercent() })\n    Mousetrap.bind(['/'], () => { this.handleOperation('/') })\n    Mousetrap.bind(['x', 'X', '*'], () => { this.handleOperation('x') })\n    Mousetrap.bind(['-'], () => { this.handleOperation('-') })\n    Mousetrap.bind(['+'], () => { this.handleOperation('+') })\n    Mousetrap.bind(['enter'], () => { this.handleEquals() })\n    Mousetrap.bind({\n      //'0': this.handleNumber.bind(this, '0'), --- this does exactly the same thing.\n      '0': () => { this.handleNumber('0') },\n      '1': () => { this.handleNumber('1') },\n      '2': () => { this.handleNumber('2') },\n      '3': () => { this.handleNumber('3') },\n      '4': () => { this.handleNumber('4') },\n      '5': () => { this.handleNumber('5') },\n      '6': () => { this.handleNumber('6') },\n      '7': () => { this.handleNumber('7') },\n      '8': () => { this.handleNumber('8') },\n      '9': () => { this.handleNumber('9') },\n      '.': () => { this.handleDot() }\n    })\n    return (\n      <React.Fragment>\n        <Header answer={this.state.answer}/>\n        <div id=\"calc-buttons\">\n          <div id=\"clear\"     onClick={ () => this.handleClear()        }>C</div>\n          <div id=\"plus-minus\" onClick={() => this.handlePlusMinus()    }>+/-</div>\n          <div id=\"percent\"   onClick={ () => this.handlePercent()      }>%</div>\n          <div id=\"divide\"    onClick={ () => this.handleOperation('/') }>รท</div>\n          <div id=\"seven\"     onClick={ () => this.handleNumber('7')    }>7</div>\n          <div id=\"eight\"     onClick={ () => this.handleNumber('8')    }>8</div>\n          <div id=\"nine\"      onClick={ () => this.handleNumber('9')    }>9</div>\n          <div id=\"multiply\"  onClick={ () => this.handleOperation('x') }>x</div>\n          <div id=\"four\"      onClick={ () => this.handleNumber('4')    }>4</div>\n          <div id=\"five\"      onClick={ () => this.handleNumber('5')    }>5</div>\n          <div id=\"six\"       onClick={ () => this.handleNumber('6')    }>6</div>\n          <div id=\"minus\"     onClick={ () => this.handleOperation('-') }>-</div>\n          <div id=\"one\"       onClick={ () => this.handleNumber('1')    }>1</div>\n          <div id=\"two\"       onClick={ () => this.handleNumber('2')    }>2</div>\n          <div id=\"three\"     onClick={ () => this.handleNumber('3')    }>3</div>\n          <div id=\"plus\"      onClick={ () => this.handleOperation('+') }>+</div>\n          <div id=\"zero\"      onClick={ () => this.handleNumber('0')    }>0</div>\n          <div id=\"dot\"       onClick={ () => this.handleDot()          }>.</div>\n          <div id=\"equals\"    onClick={ () => this.handleEquals()       }>=</div>\n        </div>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default Body","import React from 'react'\nimport styled from 'styled-components'\n\nimport Body from './Components/Body.js'\n\nconst Title = styled.h2`\n  font-size: 2em;\n  text-shadow: 2px 2px 2px #fff;\n  padding: 20px 0 0 0;\n  text-align: center;\n  color: #000;\n`\nconst Calculator = styled.div`\n  border: 1px solid #000;\n  box-shadow: 2px 3px 5px #000;\n  border-bottom: none;\n  border-radius: 4px;\n  max-width: 600px;\n  margin: 20px auto;\n`\n\nfunction App () {\n  return (\n    <React.Fragment>\n      <Title id=\"title\">Calculator</Title>\n      <Calculator id=\"calculator\">\n      </Calculator>\n    </React.Fragment>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}